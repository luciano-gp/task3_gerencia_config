name: Deploy Homolog

on:
  push:
    branches: [homolog]

permissions:
  checks: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar dependências do back-end
        working-directory: ./back
        run: npm install

      - name: Executar testes e gerar relatório
        working-directory: ./back
        run: |
          mkdir -p test-results
          npx jest --ci

      - name: Upload do relatório de testes em XML
        uses: actions/upload-artifact@v4
        with:
          name: tests-report
          path: ./back/test-results/results.xml

      - name: Publicar relatório de testes no GitHub Actions
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: tests-report-view
          path: ./back/test-results/results.xml
          reporter: jest-junit

      - name: Configurar SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy na VM (homolog)
        run: |
          DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}
          HOMOLOG_BRANCH=${{ secrets.HOMOLOG_BRANCH }}

          ssh -p 2222 -v -T -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e
            cd $DEPLOY_PATH

            # Garante que estamos na branch certa
            git fetch origin
            git checkout $HOMOLOG_BRANCH
            git reset --hard origin/$HOMOLOG_BRANCH
            git pull

            sudo docker compose -f docker-compose.homolog.yaml up -d --build
          EOF
